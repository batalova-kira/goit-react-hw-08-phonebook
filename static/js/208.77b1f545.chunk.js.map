{"version":3,"file":"static/js/208.77b1f545.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactCard/ContactCard.styled.js","components/ContactCard/ContactCard.jsx","components/ContactList/ContactList.styled.js","components/ContactList/Contactlist.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n  if (filter.trim() === '') {\n    return contacts;\n  }\n\n  return contacts.filter(item => {\n    return item.name.toLowerCase().includes(filter.toLowerCase());\n  });\n};\n","import { ErrorMessage, Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/operation';\nimport { Button } from '@mui/material';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('This field is required!'),\n  number: Yup.string().min(8, 'Too Short!').required('This field is required!'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onAddContact = newContact => {\n    const hasContact = contacts.some(\n      ({ name }) => name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    if (hasContact) {\n      alert(`${newContact.name} is already in contacts`);\n      return;\n    }\n    const finalContact = {\n      ...newContact,\n    };\n    dispatch(addContact(finalContact));\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={contactSchema}\n      onSubmit={(values, actions) => {\n        onAddContact(values);\n        actions.resetForm({\n          values: {\n            name: '',\n            number: '',\n          },\n        });\n      }}\n    >\n      <Form>\n        <label htmlFor=\"name\">Name</label>\n        <Field name=\"name\" placeholder=\"Please enter your name\" />\n        <ErrorMessage name=\"name\" component=\"div\" />\n\n        <label htmlFor=\"number\">Number</label>\n        <Field\n          name=\"number\"\n          placeholder=\"Please enter your number\"\n          type=\"text\"\n        />\n        <ErrorMessage name=\"number\" component=\"div\" />\n\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const BtnClose = styled.button`\n  display: inline-block;\n  width: 150px;\n\n  color: #fff;\n  text-transform: uppercase;\n  font-size: 0.85rem;\n  letter-spacing: 0.15rem;\n  transition: all 0.3s;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n  &:after {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border-radius: 10rem;\n    z-index: -2;\n  }\n  &:before {\n    content: '';\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 0%;\n    height: 100%;\n    transition: all 0.3s;\n    border-radius: 10rem;\n    z-index: -1;\n  }\n  &:hover {\n    color: #fff;\n    &:before {\n      width: 100%;\n    }\n  }\n`;\n\nexport const Info = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n  letter-spacing: -0.05em;\n`;\n","import React from 'react';\nimport { BtnClose, CardWrapper, Info } from './ContactCard.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operation';\n\nconst ContactCard = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <CardWrapper>\n      <Info>{name}</Info>\n      <Info>{number}</Info>\n      <BtnClose onClick={() => dispatch(deleteContact(id))}>Delete</BtnClose>\n    </CardWrapper>\n  );\n};\n\nexport default ContactCard;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n`;\n\nexport const ContactItem = styled.li`\n  max-width: 400px;\n\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.4);\n  border-radius: 2px;\n  transition: all 0.3s ease-out;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n","import ContactCard from 'components/ContactCard/ContactCard';\nimport React from 'react';\nimport { ContactItem } from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul>\n      {contacts.map(item => (\n        <ContactItem key={item.id}>\n          <ContactCard contact={item} />\n        </ContactItem>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { onChangeFilter } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <div>\n      <h3>Find contacts by name</h3>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={e => {\n          dispatch(onChangeFilter(e.target.value));\n        }}\n        placeholder=\"Enter name...\"\n      />\n    </div>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/Contactlist';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operation';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectIsLoading","state","contacts","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","items","selectContacts","trim","item","name","toLowerCase","includes","contactSchema","Yup","shape","min","max","required","number","ContactForm","useSelector","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","newContact","some","_ref","alert","concat","finalContact","_objectSpread","addContact","onAddContact","resetForm","children","_jsxs","Form","htmlFor","Field","placeholder","ErrorMessage","component","type","Button","CardWrapper","styled","_templateObject","_taggedTemplateLiteral","BtnClose","_templateObject2","Info","_templateObject3","_ref$contact","contact","id","onClick","deleteContact","ContactItem","map","ContactCard","Filter","value","onChange","e","onChangeFilter","target","Contacts","useEffect","fetchContacts","_Fragment","ContactList"],"sourceRoot":""}